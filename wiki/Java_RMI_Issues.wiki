 <a href="http://code.google.com/p/simpleremotedesktop/wiki/Screenshots">Previous: Screenshots</a>   <a href="http://code.google.com/p/simpleremotedesktop/wiki/Limitations">Next: Limitations</a>          

It's time for you to see why SRD swtiched its implementation from Java RMI to Spring RMI.

As you can see from [Architecture] page, RMI or RPC is a great invention to invoke methods remotely over the wire. For the users and Java developers who use RMI, there are some issues when executing programs and developing with the technology.

<h1>Issues with Java RMI</h1>

 * Jave RMI forces the users to type a long argument list when executing programs like below
 * For the Java developer, there is a difficulty to write code using RMI without some useful RMI pluging to make their life easier.
 * Less decoupling design pattern 


These issues are covered by Spring RMI.

<h1>Advantage of Spring RMI</h1>



 <a href="http://code.google.com/p/simpleremotedesktop/wiki/Screenshots">Previous: Screenshots</a>   <a href="http://code.google.com/p/simpleremotedesktop/wiki/Limitations">Next: Limitations</a>                                 